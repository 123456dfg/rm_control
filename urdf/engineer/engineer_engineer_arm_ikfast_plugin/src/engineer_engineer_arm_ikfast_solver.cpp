/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-04-15 10:51:13.980725
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[0]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[2]);
x6=IKcos(j[4]);
x7=IKsin(j[3]);
x8=IKcos(j[3]);
x9=IKsin(j[4]);
x10=((0.145)*x2);
x11=((1.0)*x0);
x12=((1.0)*x8);
x13=((1.0)*x7);
x14=((0.16)*x1);
x15=((1.0)*x2);
x16=((0.145)*x0);
x17=(x1*x3);
x18=(x4*x5);
x19=(x1*x5);
x20=((1.0)*x3*x4);
eetrans[0]=((0.133)+(((0.05909)*x0))+((x0*x14))+(((-1.0)*x16*x18))+((x16*x17)));
eetrans[1]=((((0.05909)*x2))+((x14*x2))+(((-1.0)*x10*x18))+((x10*x17)));
eetrans[2]=((0.228)+(((-0.145)*x3*x4))+(((-0.16)*x4))+(((-0.145)*x19)));
IkReal x21=((1.0)*x11);
eerot[0]=((((-1.0)*x6*((((x12*(((((-1.0)*x19*x21))+(((-1.0)*x21*x3*x4))))))+((x13*(((((-1.0)*x17*x21))+((x11*x18))))))))))+((x2*x9)));
IkReal x22=((1.0)*x15);
eerot[1]=((((-1.0)*x11*x9))+(((-1.0)*x6*((((x13*(((((-1.0)*x17*x22))+((x15*x18))))))+((x12*(((((-1.0)*x19*x22))+(((-1.0)*x22*x3*x4)))))))))));
eerot[2]=((-1.0)*x6*((((x12*(((((-1.0)*x17))+x18))))+((x13*(((((1.0)*x19))+x20)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j68,cj68,sj68,htj68,j68mul,j69,cj69,sj69,htj69,j69mul,j70,cj70,sj70,htj70,j70mul,j71,cj71,sj71,htj71,j71mul,j72,cj72,sj72,htj72,j72mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij68[2], _nj68,_ij69[2], _nj69,_ij70[2], _nj70,_ij71[2], _nj71,_ij72[2], _nj72;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j68=numeric_limits<IkReal>::quiet_NaN(); _ij68[0] = -1; _ij68[1] = -1; _nj68 = -1; j69=numeric_limits<IkReal>::quiet_NaN(); _ij69[0] = -1; _ij69[1] = -1; _nj69 = -1; j70=numeric_limits<IkReal>::quiet_NaN(); _ij70[0] = -1; _ij70[1] = -1; _nj70 = -1; j71=numeric_limits<IkReal>::quiet_NaN(); _ij71[0] = -1; _ij71[1] = -1; _nj71 = -1; j72=numeric_limits<IkReal>::quiet_NaN(); _ij72[0] = -1; _ij72[1] = -1; _nj72 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((-0.133)+px);
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.228)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j68eval[1];
j68eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j68eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j68, j69, j70]

} else
{
{
IkReal j68array[2], cj68array[2], sj68array[2];
bool j68valid[2]={false};
_nj68 = 2;
CheckValue<IkReal> x24 = IKatan2WithCheck(IkReal(((-1.0)*py)),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x24.valid){
continue;
}
IkReal x23=x24.value;
j68array[0]=((-1.0)*x23);
sj68array[0]=IKsin(j68array[0]);
cj68array[0]=IKcos(j68array[0]);
j68array[1]=((3.14159265358979)+(((-1.0)*x23)));
sj68array[1]=IKsin(j68array[1]);
cj68array[1]=IKcos(j68array[1]);
if( j68array[0] > IKPI )
{
    j68array[0]-=IK2PI;
}
else if( j68array[0] < -IKPI )
{    j68array[0]+=IK2PI;
}
j68valid[0] = true;
if( j68array[1] > IKPI )
{
    j68array[1]-=IK2PI;
}
else if( j68array[1] < -IKPI )
{    j68array[1]+=IK2PI;
}
j68valid[1] = true;
for(int ij68 = 0; ij68 < 2; ++ij68)
{
if( !j68valid[ij68] )
{
    continue;
}
_ij68[0] = ij68; _ij68[1] = -1;
for(int iij68 = ij68+1; iij68 < 2; ++iij68)
{
if( j68valid[iij68] && IKabs(cj68array[ij68]-cj68array[iij68]) < IKFAST_SOLUTION_THRESH && IKabs(sj68array[ij68]-sj68array[iij68]) < IKFAST_SOLUTION_THRESH )
{
    j68valid[iij68]=false; _ij68[1] = iij68; break; 
}
}
j68 = j68array[ij68]; cj68 = cj68array[ij68]; sj68 = sj68array[ij68];

{
IkReal j70array[2], cj70array[2], sj70array[2];
bool j70valid[2]={false};
_nj70 = 2;
cj70array[0]=((-0.929598532327586)+(((21.551724137931)*(py*py)))+(((21.551724137931)*(px*px)))+(((-2.54698275862069)*cj68*px))+(((-2.54698275862069)*py*sj68))+(((21.551724137931)*(pz*pz))));
if( cj70array[0] >= -1-IKFAST_SINCOS_THRESH && cj70array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j70valid[0] = j70valid[1] = true;
    j70array[0] = IKacos(cj70array[0]);
    sj70array[0] = IKsin(j70array[0]);
    cj70array[1] = cj70array[0];
    j70array[1] = -j70array[0];
    sj70array[1] = -sj70array[0];
}
else if( isnan(cj70array[0]) )
{
    // probably any value will work
    j70valid[0] = true;
    cj70array[0] = 1; sj70array[0] = 0; j70array[0] = 0;
}
for(int ij70 = 0; ij70 < 2; ++ij70)
{
if( !j70valid[ij70] )
{
    continue;
}
_ij70[0] = ij70; _ij70[1] = -1;
for(int iij70 = ij70+1; iij70 < 2; ++iij70)
{
if( j70valid[iij70] && IKabs(cj70array[ij70]-cj70array[iij70]) < IKFAST_SOLUTION_THRESH && IKabs(sj70array[ij70]-sj70array[iij70]) < IKFAST_SOLUTION_THRESH )
{
    j70valid[iij70]=false; _ij70[1] = iij70; break; 
}
}
j70 = j70array[ij70]; cj70 = cj70array[ij70]; sj70 = sj70array[ij70];

{
IkReal j69eval[3];
IkReal x25=(py*sj68);
IkReal x26=((5800.0)*sj70);
IkReal x27=(cj68*px);
IkReal x28=((5800.0)*cj70);
j69eval[0]=((1.00484913793103)+cj70);
j69eval[1]=IKsign(((1865.0)+(((1856.0)*cj70))));
j69eval[2]=((IKabs(((((-1.0)*x25*x26))+(((-1.0)*pz*x28))+(((-1.0)*x26*x27))+(((-6400.0)*pz))+(((342.722)*sj70)))))+(IKabs(((-378.176)+(((6400.0)*x25))+(((6400.0)*x27))+(((-1.0)*pz*x26))+((x25*x28))+(((-342.722)*cj70))+((x27*x28))))));
if( IKabs(j69eval[0]) < 0.0000010000000000  || IKabs(j69eval[1]) < 0.0000010000000000  || IKabs(j69eval[2]) < 0.0000010000000000  )
{
{
IkReal j69eval[3];
IkReal x29=(cj68*px);
IkReal x30=((200.0)*pz);
IkReal x31=(py*sj68);
IkReal x32=(pz*sj70);
IkReal x33=(cj70*x31);
j69eval[0]=((1.10344827586207)+(((-18.6740273457788)*x31))+(((-18.6740273457788)*x29))+cj70+(((-16.923337282112)*x33))+(((-16.923337282112)*x32))+(((-16.923337282112)*cj70*x29)));
j69eval[1]=IKsign(((1.89088)+(((-29.0)*x33))+(((-29.0)*x32))+(((-32.0)*x29))+(((-29.0)*cj70*x29))+(((1.71361)*cj70))+(((-32.0)*x31))));
j69eval[2]=((IKabs((((x29*x30))+(((-11.818)*pz))+(((4.64)*sj70))+((x30*x31))+(((4.205)*cj70*sj70)))))+(IKabs(((-5.12)+(((-9.28)*cj70))+((pz*x30))+(((-4.205)*(cj70*cj70)))))));
if( IKabs(j69eval[0]) < 0.0000010000000000  || IKabs(j69eval[1]) < 0.0000010000000000  || IKabs(j69eval[2]) < 0.0000010000000000  )
{
{
IkReal j69eval[3];
IkReal x34=py*py;
IkReal x35=cj68*cj68;
IkReal x36=px*px;
IkReal x37=pz*pz;
IkReal x38=(py*sj68);
IkReal x39=(cj68*px);
IkReal x40=((29.0)*cj70);
IkReal x41=((29.0)*sj70);
IkReal x42=((286.399344764123)*x34);
IkReal x43=((200.0)*x34);
IkReal x44=(x35*x36);
j69eval[0]=((-1.0)+((x35*x42))+(((-1.0)*x42))+(((-572.798689528246)*x38*x39))+(((-286.399344764123)*x44))+(((-286.399344764123)*x37))+(((33.8466745642241)*x39))+(((33.8466745642241)*x38)));
j69eval[1]=IKsign(((-0.69832562)+((x35*x43))+(((-1.0)*x43))+(((-200.0)*x37))+(((23.636)*x39))+(((23.636)*x38))+(((-200.0)*x44))+(((-400.0)*x38*x39))));
j69eval[2]=((IKabs(((1.89088)+((pz*x41))+(((-1.0)*x38*x40))+(((-1.0)*x39*x40))+(((1.71361)*cj70))+(((-32.0)*x39))+(((-32.0)*x38)))))+(IKabs((((pz*x40))+((x38*x41))+((x39*x41))+(((-1.71361)*sj70))+(((32.0)*pz))))));
if( IKabs(j69eval[0]) < 0.0000010000000000  || IKabs(j69eval[1]) < 0.0000010000000000  || IKabs(j69eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j69]

} else
{
{
IkReal j69array[1], cj69array[1], sj69array[1];
bool j69valid[1]={false};
_nj69 = 1;
IkReal x45=cj68*cj68;
IkReal x46=py*py;
IkReal x47=((29.0)*cj70);
IkReal x48=(py*sj68);
IkReal x49=((29.0)*sj70);
IkReal x50=(cj68*px);
IkReal x51=((200.0)*x46);
CheckValue<IkReal> x52=IKPowWithIntegerCheck(IKsign(((-0.69832562)+(((23.636)*x50))+(((23.636)*x48))+((x45*x51))+(((-200.0)*(pz*pz)))+(((-1.0)*x51))+(((-200.0)*x45*(px*px)))+(((-400.0)*x48*x50)))),-1);
if(!x52.valid){
continue;
}
CheckValue<IkReal> x53 = IKatan2WithCheck(IkReal((((pz*x47))+((x48*x49))+(((-1.71361)*sj70))+((x49*x50))+(((32.0)*pz)))),IkReal(((1.89088)+((pz*x49))+(((-1.0)*x47*x50))+(((1.71361)*cj70))+(((-32.0)*x50))+(((-32.0)*x48))+(((-1.0)*x47*x48)))),IKFAST_ATAN2_MAGTHRESH);
if(!x53.valid){
continue;
}
j69array[0]=((-1.5707963267949)+(((1.5707963267949)*(x52.value)))+(x53.value));
sj69array[0]=IKsin(j69array[0]);
cj69array[0]=IKcos(j69array[0]);
if( j69array[0] > IKPI )
{
    j69array[0]-=IK2PI;
}
else if( j69array[0] < -IKPI )
{    j69array[0]+=IK2PI;
}
j69valid[0] = true;
for(int ij69 = 0; ij69 < 1; ++ij69)
{
if( !j69valid[ij69] )
{
    continue;
}
_ij69[0] = ij69; _ij69[1] = -1;
for(int iij69 = ij69+1; iij69 < 1; ++iij69)
{
if( j69valid[iij69] && IKabs(cj69array[ij69]-cj69array[iij69]) < IKFAST_SOLUTION_THRESH && IKabs(sj69array[ij69]-sj69array[iij69]) < IKFAST_SOLUTION_THRESH )
{
    j69valid[iij69]=false; _ij69[1] = iij69; break; 
}
}
j69 = j69array[ij69]; cj69 = cj69array[ij69]; sj69 = sj69array[ij69];
{
IkReal evalcond[5];
IkReal x54=IKsin(j69);
IkReal x55=IKcos(j69);
IkReal x56=(py*sj68);
IkReal x57=((0.145)*cj70);
IkReal x58=(cj68*px);
IkReal x59=((0.145)*sj70);
IkReal x60=((1.0)*x55);
IkReal x61=((0.32)*x55);
IkReal x62=(pz*x54);
evalcond[0]=((((0.16)*x54))+pz+((x55*x59))+((x54*x57)));
evalcond[1]=((((-0.05909)*x54))+x59+((pz*x55))+((x54*x56))+((x54*x58)));
evalcond[2]=((0.05909)+(((0.16)*x55))+(((-1.0)*x54*x59))+(((-1.0)*x56))+(((-1.0)*x58))+((x55*x57)));
evalcond[3]=((0.16)+(((-1.0)*x56*x60))+x57+x62+(((-1.0)*x58*x60))+(((0.05909)*x55)));
evalcond[4]=((-0.0080666281)+(((-1.0)*(px*px)))+((x58*x61))+((x56*x61))+(((-1.0)*(pz*pz)))+(((-0.0189088)*x55))+(((0.11818)*x58))+(((0.11818)*x56))+(((-1.0)*(py*py)))+(((-0.32)*x62)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j69array[1], cj69array[1], sj69array[1];
bool j69valid[1]={false};
_nj69 = 1;
IkReal x80=(py*sj68);
IkReal x81=((29.0)*cj70);
IkReal x82=(cj68*px);
IkReal x83=((200.0)*pz);
CheckValue<IkReal> x84=IKPowWithIntegerCheck(IKsign(((1.89088)+(((-1.0)*x81*x82))+(((-1.0)*x80*x81))+(((-29.0)*pz*sj70))+(((1.71361)*cj70))+(((-32.0)*x82))+(((-32.0)*x80)))),-1);
if(!x84.valid){
continue;
}
CheckValue<IkReal> x85 = IKatan2WithCheck(IkReal((((x82*x83))+(((-11.818)*pz))+(((4.64)*sj70))+((x80*x83))+(((4.205)*cj70*sj70)))),IkReal(((-5.12)+(((-9.28)*cj70))+((pz*x83))+(((-4.205)*(cj70*cj70))))),IKFAST_ATAN2_MAGTHRESH);
if(!x85.valid){
continue;
}
j69array[0]=((-1.5707963267949)+(((1.5707963267949)*(x84.value)))+(x85.value));
sj69array[0]=IKsin(j69array[0]);
cj69array[0]=IKcos(j69array[0]);
if( j69array[0] > IKPI )
{
    j69array[0]-=IK2PI;
}
else if( j69array[0] < -IKPI )
{    j69array[0]+=IK2PI;
}
j69valid[0] = true;
for(int ij69 = 0; ij69 < 1; ++ij69)
{
if( !j69valid[ij69] )
{
    continue;
}
_ij69[0] = ij69; _ij69[1] = -1;
for(int iij69 = ij69+1; iij69 < 1; ++iij69)
{
if( j69valid[iij69] && IKabs(cj69array[ij69]-cj69array[iij69]) < IKFAST_SOLUTION_THRESH && IKabs(sj69array[ij69]-sj69array[iij69]) < IKFAST_SOLUTION_THRESH )
{
    j69valid[iij69]=false; _ij69[1] = iij69; break; 
}
}
j69 = j69array[ij69]; cj69 = cj69array[ij69]; sj69 = sj69array[ij69];
{
IkReal evalcond[5];
IkReal x86=IKsin(j69);
IkReal x87=IKcos(j69);
IkReal x88=(py*sj68);
IkReal x89=((0.145)*cj70);
IkReal x90=(cj68*px);
IkReal x91=((0.145)*sj70);
IkReal x92=((1.0)*x87);
IkReal x93=((0.32)*x87);
IkReal x94=(pz*x86);
evalcond[0]=(((x87*x91))+(((0.16)*x86))+((x86*x89))+pz);
evalcond[1]=(((x86*x90))+((x86*x88))+((pz*x87))+(((-0.05909)*x86))+x91);
evalcond[2]=((0.05909)+(((0.16)*x87))+(((-1.0)*x86*x91))+(((-1.0)*x88))+(((-1.0)*x90))+((x87*x89)));
evalcond[3]=((0.16)+(((-1.0)*x90*x92))+x89+x94+(((0.05909)*x87))+(((-1.0)*x88*x92)));
evalcond[4]=((-0.0080666281)+(((-1.0)*(px*px)))+(((-0.32)*x94))+(((-0.0189088)*x87))+((x90*x93))+((x88*x93))+(((-1.0)*(pz*pz)))+(((0.11818)*x90))+(((0.11818)*x88))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j69array[1], cj69array[1], sj69array[1];
bool j69valid[1]={false};
_nj69 = 1;
IkReal x95=(py*sj68);
IkReal x96=((5800.0)*sj70);
IkReal x97=(cj68*px);
IkReal x98=((5800.0)*cj70);
CheckValue<IkReal> x99=IKPowWithIntegerCheck(IKsign(((1865.0)+(((1856.0)*cj70)))),-1);
if(!x99.valid){
continue;
}
CheckValue<IkReal> x100 = IKatan2WithCheck(IkReal(((((-1.0)*x95*x96))+(((-1.0)*pz*x98))+(((-6400.0)*pz))+(((-1.0)*x96*x97))+(((342.722)*sj70)))),IkReal(((-378.176)+(((-1.0)*pz*x96))+((x97*x98))+(((6400.0)*x95))+(((6400.0)*x97))+((x95*x98))+(((-342.722)*cj70)))),IKFAST_ATAN2_MAGTHRESH);
if(!x100.valid){
continue;
}
j69array[0]=((-1.5707963267949)+(((1.5707963267949)*(x99.value)))+(x100.value));
sj69array[0]=IKsin(j69array[0]);
cj69array[0]=IKcos(j69array[0]);
if( j69array[0] > IKPI )
{
    j69array[0]-=IK2PI;
}
else if( j69array[0] < -IKPI )
{    j69array[0]+=IK2PI;
}
j69valid[0] = true;
for(int ij69 = 0; ij69 < 1; ++ij69)
{
if( !j69valid[ij69] )
{
    continue;
}
_ij69[0] = ij69; _ij69[1] = -1;
for(int iij69 = ij69+1; iij69 < 1; ++iij69)
{
if( j69valid[iij69] && IKabs(cj69array[ij69]-cj69array[iij69]) < IKFAST_SOLUTION_THRESH && IKabs(sj69array[ij69]-sj69array[iij69]) < IKFAST_SOLUTION_THRESH )
{
    j69valid[iij69]=false; _ij69[1] = iij69; break; 
}
}
j69 = j69array[ij69]; cj69 = cj69array[ij69]; sj69 = sj69array[ij69];
{
IkReal evalcond[5];
IkReal x101=IKsin(j69);
IkReal x102=IKcos(j69);
IkReal x103=(py*sj68);
IkReal x104=((0.145)*cj70);
IkReal x105=(cj68*px);
IkReal x106=((0.145)*sj70);
IkReal x107=((1.0)*x102);
IkReal x108=((0.32)*x102);
IkReal x109=(pz*x101);
evalcond[0]=((((0.16)*x101))+((x102*x106))+pz+((x101*x104)));
evalcond[1]=(((pz*x102))+x106+(((-0.05909)*x101))+((x101*x103))+((x101*x105)));
evalcond[2]=((0.05909)+(((0.16)*x102))+(((-1.0)*x101*x106))+((x102*x104))+(((-1.0)*x103))+(((-1.0)*x105)));
evalcond[3]=((0.16)+(((0.05909)*x102))+x109+x104+(((-1.0)*x103*x107))+(((-1.0)*x105*x107)));
evalcond[4]=((-0.0080666281)+(((-0.32)*x109))+(((-1.0)*(px*px)))+(((-0.0189088)*x102))+(((0.11818)*x105))+(((0.11818)*x103))+((x103*x108))+(((-1.0)*(pz*pz)))+((x105*x108))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

innerfn(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j72array[2], cj72array[2], sj72array[2];
bool j72valid[2]={false};
_nj72 = 2;
sj72array[0]=((((-1.0)*cj68*r01))+((r00*sj68)));
if( sj72array[0] >= -1-IKFAST_SINCOS_THRESH && sj72array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j72valid[0] = j72valid[1] = true;
    j72array[0] = IKasin(sj72array[0]);
    cj72array[0] = IKcos(j72array[0]);
    sj72array[1] = sj72array[0];
    j72array[1] = j72array[0] > 0 ? (IKPI-j72array[0]) : (-IKPI-j72array[0]);
    cj72array[1] = -cj72array[0];
}
else if( isnan(sj72array[0]) )
{
    // probably any value will work
    j72valid[0] = true;
    cj72array[0] = 1; sj72array[0] = 0; j72array[0] = 0;
}
for(int ij72 = 0; ij72 < 2; ++ij72)
{
if( !j72valid[ij72] )
{
    continue;
}
_ij72[0] = ij72; _ij72[1] = -1;
for(int iij72 = ij72+1; iij72 < 2; ++iij72)
{
if( j72valid[iij72] && IKabs(cj72array[ij72]-cj72array[iij72]) < IKFAST_SOLUTION_THRESH && IKabs(sj72array[ij72]-sj72array[iij72]) < IKFAST_SOLUTION_THRESH )
{
    j72valid[iij72]=false; _ij72[1] = iij72; break; 
}
}
j72 = j72array[ij72]; cj72 = cj72array[ij72]; sj72 = sj72array[ij72];

{
IkReal j71eval[2];
j71eval[0]=cj72;
j71eval[1]=IKsign(cj72);
if( IKabs(j71eval[0]) < 0.0000010000000000  || IKabs(j71eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j72)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j71array[1], cj71array[1], sj71array[1];
bool j71valid[1]={false};
_nj71 = 1;
j71array[0]=0;
sj71array[0]=IKsin(j71array[0]);
cj71array[0]=IKcos(j71array[0]);
if( j71array[0] > IKPI )
{
    j71array[0]-=IK2PI;
}
else if( j71array[0] < -IKPI )
{    j71array[0]+=IK2PI;
}
j71valid[0] = true;
for(int ij71 = 0; ij71 < 1; ++ij71)
{
if( !j71valid[ij71] )
{
    continue;
}
_ij71[0] = ij71; _ij71[1] = -1;
for(int iij71 = ij71+1; iij71 < 1; ++iij71)
{
if( j71valid[iij71] && IKabs(cj71array[ij71]-cj71array[iij71]) < IKFAST_SOLUTION_THRESH && IKabs(sj71array[ij71]-sj71array[iij71]) < IKFAST_SOLUTION_THRESH )
{
    j71valid[iij71]=false; _ij71[1] = iij71; break; 
}
}
j71 = j71array[ij71]; cj71 = cj71array[ij71]; sj71 = sj71array[ij71];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j68;
vinfos[0].indices[0] = _ij68[0];
vinfos[0].indices[1] = _ij68[1];
vinfos[0].maxsolutions = _nj68;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j69;
vinfos[1].indices[0] = _ij69[0];
vinfos[1].indices[1] = _ij69[1];
vinfos[1].maxsolutions = _nj69;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j70;
vinfos[2].indices[0] = _ij70[0];
vinfos[2].indices[1] = _ij70[1];
vinfos[2].maxsolutions = _nj70;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j71;
vinfos[3].indices[0] = _ij71[0];
vinfos[3].indices[1] = _ij71[1];
vinfos[3].maxsolutions = _nj71;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j72;
vinfos[4].indices[0] = _ij72[0];
vinfos[4].indices[1] = _ij72[1];
vinfos[4].maxsolutions = _nj72;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j72)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j71array[1], cj71array[1], sj71array[1];
bool j71valid[1]={false};
_nj71 = 1;
j71array[0]=0;
sj71array[0]=IKsin(j71array[0]);
cj71array[0]=IKcos(j71array[0]);
if( j71array[0] > IKPI )
{
    j71array[0]-=IK2PI;
}
else if( j71array[0] < -IKPI )
{    j71array[0]+=IK2PI;
}
j71valid[0] = true;
for(int ij71 = 0; ij71 < 1; ++ij71)
{
if( !j71valid[ij71] )
{
    continue;
}
_ij71[0] = ij71; _ij71[1] = -1;
for(int iij71 = ij71+1; iij71 < 1; ++iij71)
{
if( j71valid[iij71] && IKabs(cj71array[ij71]-cj71array[iij71]) < IKFAST_SOLUTION_THRESH && IKabs(sj71array[ij71]-sj71array[iij71]) < IKFAST_SOLUTION_THRESH )
{
    j71valid[iij71]=false; _ij71[1] = iij71; break; 
}
}
j71 = j71array[ij71]; cj71 = cj71array[ij71]; sj71 = sj71array[ij71];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j68;
vinfos[0].indices[0] = _ij68[0];
vinfos[0].indices[1] = _ij68[1];
vinfos[0].maxsolutions = _nj68;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j69;
vinfos[1].indices[0] = _ij69[0];
vinfos[1].indices[1] = _ij69[1];
vinfos[1].maxsolutions = _nj69;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j70;
vinfos[2].indices[0] = _ij70[0];
vinfos[2].indices[1] = _ij70[1];
vinfos[2].maxsolutions = _nj70;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j71;
vinfos[3].indices[0] = _ij71[0];
vinfos[3].indices[1] = _ij71[1];
vinfos[3].maxsolutions = _nj71;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j72;
vinfos[4].indices[0] = _ij72[0];
vinfos[4].indices[1] = _ij72[1];
vinfos[4].maxsolutions = _nj72;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j71]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j71array[1], cj71array[1], sj71array[1];
bool j71valid[1]={false};
_nj71 = 1;
IkReal x63=(cj70*sj69);
IkReal x64=((1.0)*r02);
IkReal x65=(r01*sj68);
IkReal x66=(cj69*cj70);
IkReal x67=(cj68*r00);
IkReal x68=(cj69*sj70);
IkReal x69=((1.0)*sj69*sj70);
CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal(((((-1.0)*x67*x69))+(((-1.0)*x64*x68))+(((-1.0)*x65*x69))+(((-1.0)*x63*x64))+((x66*x67))+((x65*x66)))),IkReal((((r02*x66))+((x67*x68))+((x63*x67))+((x63*x65))+(((-1.0)*sj69*sj70*x64))+((x65*x68)))),IKFAST_ATAN2_MAGTHRESH);
if(!x70.valid){
continue;
}
CheckValue<IkReal> x71=IKPowWithIntegerCheck(IKsign(cj72),-1);
if(!x71.valid){
continue;
}
j71array[0]=((-1.5707963267949)+(x70.value)+(((1.5707963267949)*(x71.value))));
sj71array[0]=IKsin(j71array[0]);
cj71array[0]=IKcos(j71array[0]);
if( j71array[0] > IKPI )
{
    j71array[0]-=IK2PI;
}
else if( j71array[0] < -IKPI )
{    j71array[0]+=IK2PI;
}
j71valid[0] = true;
for(int ij71 = 0; ij71 < 1; ++ij71)
{
if( !j71valid[ij71] )
{
    continue;
}
_ij71[0] = ij71; _ij71[1] = -1;
for(int iij71 = ij71+1; iij71 < 1; ++iij71)
{
if( j71valid[iij71] && IKabs(cj71array[ij71]-cj71array[iij71]) < IKFAST_SOLUTION_THRESH && IKabs(sj71array[ij71]-sj71array[iij71]) < IKFAST_SOLUTION_THRESH )
{
    j71valid[iij71]=false; _ij71[1] = iij71; break; 
}
}
j71 = j71array[ij71]; cj71 = cj71array[ij71]; sj71 = sj71array[ij71];
{
IkReal evalcond[2];
IkReal x72=(cj68*r00);
IkReal x73=(r02*sj70);
IkReal x74=(r01*sj68);
IkReal x75=(sj69*sj70);
IkReal x76=(cj70*r02);
IkReal x77=(cj69*sj70);
IkReal x78=(cj70*sj69);
IkReal x79=((1.0)*cj69*cj70);
evalcond[0]=(((cj69*x73))+((cj72*(IKsin(j71))))+(((-1.0)*x74*x79))+(((-1.0)*x72*x79))+((x72*x75))+((x74*x75))+((sj69*x76)));
evalcond[1]=((((-1.0)*sj69*x73))+((cj69*x76))+(((-1.0)*cj72*(IKcos(j71))))+((x72*x78))+((x72*x77))+((x74*x77))+((x74*x78)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j68;
vinfos[0].indices[0] = _ij68[0];
vinfos[0].indices[1] = _ij68[1];
vinfos[0].maxsolutions = _nj68;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j69;
vinfos[1].indices[0] = _ij69[0];
vinfos[1].indices[1] = _ij69[1];
vinfos[1].maxsolutions = _nj69;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j70;
vinfos[2].indices[0] = _ij70[0];
vinfos[2].indices[1] = _ij70[1];
vinfos[2].maxsolutions = _nj70;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j71;
vinfos[3].indices[0] = _ij71[0];
vinfos[3].indices[1] = _ij71[1];
vinfos[3].maxsolutions = _nj71;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j72;
vinfos[4].indices[0] = _ij72[0];
vinfos[4].indices[1] = _ij72[1];
vinfos[4].maxsolutions = _nj72;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "73ccfc84e91dc469ba107503542d7022"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
